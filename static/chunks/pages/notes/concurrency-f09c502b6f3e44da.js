(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6664],{4999:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/notes/concurrency",function(){return t(6261)}])},2219:function(e,n,t){"use strict";var i=t(1527);n.Z={logo:(0,i.jsx)("span",{children:"하나씩"}),project:{link:"https://h.annyeong.me"}}},6261:function(e,n,t){"use strict";t.r(n);var i=t(1527),r=t(3964),s=t(1917),l=t(2219);t(1673),t(1488);var o=t(6736);function a(e){let n=Object.assign({p:"p",h2:"h2",blockquote:"blockquote",ul:"ul",li:"li",sup:"sup",a:"a",strong:"strong",em:"em",ol:"ol",h3:"h3",code:"code",pre:"pre",span:"span",section:"section"},(0,o.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"일부에서는 병행성이라 부르기도 한다. 병렬성과의 명확한 구분을 위해 동시성이라 부르자."}),"\n",(0,i.jsx)(n.h2,{id:"병렬성과의-차이",children:"병렬성과의 차이"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"동시성은 여러 일을 한꺼번에 다루는 것이다. 병렬성은 여러 일을 한꺼번에 해내는 것이다."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["롭 파이크",(0,i.jsx)(n.sup,{children:(0,i.jsx)(n.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"동시성"}),"(concurrency)은 논리적 개념이다. 동시적인 프로그램은 병렬적으로 돌\n수도 있고, 아닐 수도 있다. 액터, 스레드 등 동시성 모델을 이용하여 실현할 수 있다."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"병렬성"}),"(parallelism)은 물리적 개념이다. 여러 병렬적 방법으로 동시에 계산을\n해낸다. 다중코어, 분산 시스템 등을 이용하여 실현할 수 있다."]}),"\n",(0,i.jsx)(n.h2,{id:"동시성이-필요한-이유",children:"동시성이 필요한 이유"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["실세계가 동시적이기 때문에","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"프로그램은 좋든 싫든, 의도했든 안했든 실세계와 상호작용한다. 그 실세계가\n동시적이므로 동시성이 필요하다."}),"\n",(0,i.jsx)(n.li,{children:"동시성이 없다면 파일을 다운 받으며 마우스를 움직일 수 없다."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["더 나은 성능을 위해","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"한 번에 하나의 요청만 처리할 수 있는 서버는 성능이 좋지 못하다."}),"\n",(0,i.jsx)(n.li,{children:"현대 프로그램에서는 I/O에서 버리는 시간이 많다."}),"\n",(0,i.jsx)(n.li,{children:"결과를 기다리는 동안 다른 일을 할 수 있다면 좋을 것이다."}),"\n",(0,i.jsx)(n.li,{children:"성능 향상을 보장하지는 않는다. 동시성을 실현하기 위한 비용이 더 클 수도 있다."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"동시성을-다루는-방법",children:"동시성을 다루는 방법"}),"\n",(0,i.jsx)(n.p,{children:"오늘날의 운영체제는 프로그램을 프로세스 단위로 실행하며 멀티태스킹한다."}),"\n",(0,i.jsxs)(n.p,{children:["운영체제는 선점형 멀티태스킹으로 프로세스와 스레드를 스케줄한다. 선점형\n멀티태스킹에서는 제어권이 바뀌는 시점을 어플리케이션이 제어할 수 없다.\n이로 인하여 공유 메모리에 서로 다른 제어 주체가 의도치 않게 접근하여 예기치\n못한 오류가 발생할 수 있다. 이를 경쟁 위험이라고 하며 경쟁 위험을 막기 위한\n여러 동시성 모델(",(0,i.jsx)(n.em,{children:"concurrency model"}),")이 있다."]}),"\n",(0,i.jsx)(n.p,{children:'"코딩을 지탱하는 기술"에서는 경쟁 위험을 막기 위한 방법을 크게 세 가지로 구분한다:'}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"공유하지 않기"}),"\n",(0,i.jsx)(n.li,{children:"변경하지 않기"}),"\n",(0,i.jsx)(n.li,{children:"끼어들지 않기"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"공유하지-않기",children:"공유하지 않기"}),"\n",(0,i.jsx)(n.p,{children:"공유하지 않으면 문제될 것이 없다."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["운영체제는 ",(0,i.jsx)(n.a,{href:"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4",children:"프로세스"}),"를 동시적으로 실행한다. 각 프로세스는 서로\n메모리를 공유하지 않는다."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#%EC%95%A1%ED%84%B0",children:"액터"})," 모델은 프로세스와 비슷하다. 한 프로세스 내에서 실행되는 여러\n액터들은 서로 메모리를 공유하지 않는다.\n필요한 경우 메시지를 교환한다."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#%EC%B1%84%EB%84%90",children:"CSP"}),"도 비슷하다. 메모리를 공유하지 않고 채널을 만들어 메시지로 보낸다."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"변경하지-않기",children:"변경하지 않기"}),"\n",(0,i.jsx)(n.p,{children:"변경하지 않으면 공유해도 문제가 없다."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"여러 함수형 언어에서 할당한 값은 기본적으로 불변이다. 값이 바뀌지 않으므로 공유해도 문제가 없다.\n하스켈, 엘릭서 등의 언어가 이에 해당한다."}),"\n",(0,i.jsx)(n.li,{children:"모든 값을 불변으로 다루는 것이 어렵다면, 적어도 불변을 장려한다. 러스트, 스칼라, 스위프트 등의 언어는\n그 전에 만들어진 언어들보다 불변 선언이 자연스럽도록 설계되었다."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"끼어들지-않기",children:"끼어들지 않기"}),"\n",(0,i.jsx)(n.p,{children:"공유하고 변경하더라도 타이밍만 잘 맞다면 문제가 없다."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["운영체제가 아니라 애플리케이션 수준에서 직접 작업을 스케쥴링한다.\n",(0,i.jsx)(n.a,{href:"#%EA%B7%B8%EB%A6%B0-%EC%8A%A4%EB%A0%88%EB%93%9C",children:"그린 스레드"}),", 파이버, 코루틴 등이 이에 해당한다."]}),"\n",(0,i.jsxs)(n.li,{children:["작업 중인 메모리에 작업 중이라고 표시하여 다른 작업이 끼어들지 않도록 한다.\n",(0,i.jsx)(n.a,{href:"#%EB%9D%BD",children:"락"}),", 뮤텍스, 세마포어, 싱크로나이즈, STM 등이 이에 해당한다."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"프로세스",children:"프로세스"}),"\n",(0,i.jsx)(n.h2,{id:"액터",children:"액터"}),"\n",(0,i.jsxs)(n.p,{children:["프로그램을 액터(",(0,i.jsx)(n.em,{children:"actor"}),")와 액터 사이의 의사소통으로 본다. 각 액터는 동시에 돌아가며 정보 공유는 메시지 전달을 통해 이루어진다."]}),"\n",(0,i.jsx)(n.h2,{id:"채널",children:"채널"}),"\n",(0,i.jsxs)(n.p,{children:["CSP는 순차 프로세스 통신(",(0,i.jsx)(n.em,{children:"communicating sequential process"}),")의 약어이다. 스레드 사이에서 메시지를 통해 값을 공유한다는 점에서 액터와 유사하다. 액터가 메시지를 주고 받는 주체인 액터에 초점을 맞춘 것에 비해, CSP는 메시지를 주고 받는 채널에 초점을 맞추었다."]}),"\n",(0,i.jsx)(n.p,{children:"고 언어에서 언어 수준에서 지원하며 많은 주목을 받았다."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Do not communicate\xa0by sharing memory; instead, share memory by communicating."}),"\n",(0,i.jsx)(n.p,{children:"공유 메모리로 communication하지말자.\xa0communication하여 메모리를 공유하자."}),"\n",(0,i.jsxs)(n.p,{children:["-- ",(0,i.jsx)(n.a,{href:"https://go.dev/doc/effective_go#sharing",children:"Effective Go"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"함수형-프로그래밍",children:"함수형 프로그래밍"}),"\n",(0,i.jsxs)(n.p,{children:["함수형 프로그래밍(",(0,i.jsx)(n.em,{children:"FP; functional programming"}),")에서는 불변 변수를 최대한 활용하고, 부수 작용을 통제하는 프로그래밍 방법론이다."]}),"\n",(0,i.jsx)(n.h2,{id:"그린-스레드",children:"그린 스레드"}),"\n",(0,i.jsx)(n.p,{children:"스레드와 비슷하게 쓸 수 있다. 프로그래밍 모델을 바꿀 필요가 없다. 스레드보다 오버헤드가 적어 많은 양의 그린 스레드를 만들 수 있다."}),"\n",(0,i.jsx)(n.h2,{id:"스레드",children:"스레드"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"스레드는 이미 널리 쓰이는 개념이며 운영체제에서 지원한다."}),"\n",(0,i.jsx)(n.li,{children:"기존의 동기 코드나 라이브러리를 쉽게 이용할 수 있다."}),"\n",(0,i.jsx)(n.li,{children:"하지만 각 스레드를 서로 동기화 하는 것은 어렵고, 스레드를 생성하고 스위칭하는 비용도 비싸다."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"스레드 풀을 만들어 비용을 줄일 수도 있다."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"커널 스레드: 운영체제 커널이 스케줄링한다."}),"\n",(0,i.jsx)(n.li,{children:"유저 스레드: 프로세스가 직접 스레드를 스케줄링한다. 커널이 볼 때에는 일반적인 프로세스로 보인다."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"락",children:"락"}),"\n",(0,i.jsxs)(n.p,{children:["교착 상태(",(0,i.jsx)(n.em,{children:"deadlock"}),")의 위험이 있다."]}),"\n",(0,i.jsx)(n.h3,{id:"교착-상태",children:"교착 상태"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["상호 배제(",(0,i.jsx)(n.em,{children:"mutual exclusion"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"점유 상태로 대기 (Hold and wait)"}),"\n",(0,i.jsx)(n.li,{children:"선점 불가 (No preemption)"}),"\n",(0,i.jsx)(n.li,{children:"순환성 대기 (Circular wait)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"stm",children:"STM"}),"\n",(0,i.jsx)(n.p,{children:"Software transaction memory\nclojure."}),"\n",(0,i.jsx)(n.h2,{id:"비동기-프로그래밍",children:"비동기 프로그래밍"}),"\n",(0,i.jsx)(n.p,{children:"C#, rust, JS 등."}),"\n",(0,i.jsxs)(n.p,{children:["비동기 프로그래밍은 오늘날 점점 더 많은 언어에서 지원하는 동시성 프로그래밍 모델이다. ",(0,i.jsx)(n.code,{children:"async/await"})," 문법을 이용하여 코드가 동기적으로 보이도록 한다."]}),"\n",(0,i.jsx)(n.p,{children:"적은 CPU, 메모리 오버헤드를 소모한다. 특히 서버나 DB 같은 많은 양의 IO 작업에 유리하다. 적은 수의 스레드를 런타임으로 활용하여 많고 비용이 적은 비동기 작업을 처리할 수 있다."}),"\n",(0,i.jsx)(n.h2,{id:"이벤트-기반-설계",children:"이벤트 기반 설계"}),"\n",(0,i.jsxs)(n.p,{children:["이벤트 기반 설계(",(0,i.jsx)(n.em,{children:"event driven architecture"}),") 혹은 이벤트 루프는 성능이 우수하며 스레드 수가 적어도 데이터 흐름과 오류 전파를 따라가기 힘들다."]}),"\n",(0,i.jsx)(n.p,{children:"자바스크립트에서 주로 사용한다."}),"\n",(0,i.jsx)(n.h2,{id:"observerable",children:"observerable"}),"\n",(0,i.jsx)(n.p,{children:"RxSwift, RxJs 등"}),"\n",(0,i.jsx)(n.h2,{id:"용어",children:"용어"}),"\n",(0,i.jsx)(n.h3,{id:"공유-자원",children:"공유 자원"}),"\n",(0,i.jsxs)(n.p,{children:["시스템 안에서 여러 스레드나 프로세스가 함께 접근할 수 있는 자원을 공유 자원(",(0,i.jsx)(n.em,{children:"shared resource"}),")이라고 한다."]}),"\n",(0,i.jsx)(n.h3,{id:"임계-영역",children:"임계 영역"}),"\n",(0,i.jsxs)(n.p,{children:["공유 자원에 접근하는 코드들을 임계 영역(",(0,i.jsx)(n.em,{children:"critical section"}),")이라고 한다."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"#%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C",children:"상호 배제"})," 등의 기법으로 임계 영역에 하나의 쓰레드만이 진입하도록 보장해야한다."]}),"\n",(0,i.jsx)(n.p,{children:"임계 영역이 제대로 설정되지 않으면 아래와 같은 문제가 발생할 수 있다:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"입출금 문제"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"경쟁-상태",children:"경쟁 상태"}),"\n",(0,i.jsxs)(n.p,{children:["여러 스레드가 동시에 임계 영역에 접근하여 발생하는 문제를 경쟁 상태(",(0,i.jsx)(n.em,{children:"race condition"}),") 혹은 경쟁 위험(",(0,i.jsx)(n.em,{children:"race hazard"}),")라고 한다."]}),"\n",(0,i.jsx)(n.h3,{id:"상호-배제",children:"상호 배제"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"#%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD",children:"임계 영역"}),"에 한 개의 프로세스만 진입할 수 있도록, 즉 원자적으로 실행할 수 있도록 하는 기법을 상호 배제(",(0,i.jsx)(n.em,{children:"mutual exclution"}),")라고 한다."]}),"\n",(0,i.jsxs)(n.p,{children:["임계 영역을 잠궈서 원자적으로 다룰 수 있다. 이를 락(",(0,i.jsx)(n.em,{children:"lock"}),")이라고 부르며 락을 구현한 자료구조나 스마트 포인터를 흔히 mutex라고 부른다."]}),"\n",(0,i.jsx)(n.pre,{"data-language":"rust","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"rust","data-theme":"default",children:[(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"// 상호 배제가 가능한 변수를 선언한다."})}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"let"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" m "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"Mutex"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"::"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"new"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"5"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:");"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"{"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"    // 변수에 접근하기 전에 먼저 임계 영역을 잠근다."})}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"	"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"let"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"mut"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" num "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" m"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"."}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"lock"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"()"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"."}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"unwrap"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"();"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"	"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"	// 변수에 마음대로 접근할 수 있다."})}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"	"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"num "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"6"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:" "}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"    // 러스트에서는 블록이 끝나면 자동으로 잠금을 푼다."})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,i.jsx)(n.h2,{id:"참고",children:"참고"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"니시오 히로카즈, 코딩을 지탱하는 기술 : 원리로 깨우치는 프로그래밍 기법, 2013."}),"\n",(0,i.jsx)(n.li,{children:"폴 부처, 7가지 동시성 모델, 2016."}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://ericnormand.me/guide/clojure-concurrency#threadsjvm",children:"Clojure Concurrency Tutorial for Beginners with Code Examples"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.slideshare.net/eunminn/clojure-68804824",children:"동시성 프로그래밍 하기 좋은 Clojure"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=o9JnT4sneAQ",children:"[Track 1-2] 유인동 - ES6+ 비동기 프로그래밍과 실전 에러 핸들링"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=oHF8PEkteq0",children:"[Track 2-2] 나석주 - 비동기를 우아하게 처리하기 위한 Observable"})}),"\n",(0,i.jsxs)(n.li,{children:["[Why Async? - Asynchronous Programming in Rust](",(0,i.jsx)(n.a,{href:"https://rust-lang.github.io/async-book/01_getting_started/02_why_asy%1B%5B",children:"https://rust-lang.github.io/async-book/01_getting_started/02_why_asy\x1b["}),"<43;66;8Mnc.html)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://tech.devsisters.com/posts/server-position-coding-test/",children:"데브시스터즈 서버 직군은 왜 코딩 면접을 볼까?"})}),"\n"]}),"\n",(0,i.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,i.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{id:"user-content-fn-1",children:["\n",(0,i.jsxs)(n.p,{children:["Rob Pike, ",(0,i.jsx)(n.a,{href:"https://go.dev/blog/waza-talk",children:"Concurrency is not Parallelism"}),", 2013. ",(0,i.jsx)(n.a,{href:"#user-content-fnref-1","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content",children:"↩"})]}),"\n"]}),"\n"]}),"\n"]})]})}t(2651);let d={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)},pageOpts:{filePath:"pages/notes/concurrency.md",route:"/notes/concurrency",frontMatter:{title:"동시성",description:"동시성을 다루는 방법",date:"2023-02-24T00:00:00.000Z",tags:null},headings:[{depth:2,value:"병렬성과의 차이",id:"병렬성과의-차이"},{depth:2,value:"동시성이 필요한 이유",id:"동시성이-필요한-이유"},{depth:2,value:"동시성을 다루는 방법",id:"동시성을-다루는-방법"},{depth:3,value:"공유하지 않기",id:"공유하지-않기"},{depth:3,value:"변경하지 않기",id:"변경하지-않기"},{depth:3,value:"끼어들지 않기",id:"끼어들지-않기"},{depth:2,value:"프로세스",id:"프로세스"},{depth:2,value:"액터",id:"액터"},{depth:2,value:"채널",id:"채널"},{depth:2,value:"함수형 프로그래밍",id:"함수형-프로그래밍"},{depth:2,value:"그린 스레드",id:"그린-스레드"},{depth:2,value:"스레드",id:"스레드"},{depth:2,value:"락",id:"락"},{depth:3,value:"교착 상태",id:"교착-상태"},{depth:2,value:"STM",id:"stm"},{depth:2,value:"비동기 프로그래밍",id:"비동기-프로그래밍"},{depth:2,value:"이벤트 기반 설계",id:"이벤트-기반-설계"},{depth:2,value:"observerable",id:"observerable"},{depth:2,value:"용어",id:"용어"},{depth:3,value:"공유 자원",id:"공유-자원"},{depth:3,value:"임계 영역",id:"임계-영역"},{depth:3,value:"경쟁 상태",id:"경쟁-상태"},{depth:3,value:"상호 배제",id:"상호-배제"},{depth:2,value:"참고",id:"참고"}],pageMap:[{kind:"MdxPage",name:"index",route:"/",frontMatter:{title:"index",date:"2023-01-10T00:00:00.000Z",tags:[]}},{kind:"Folder",name:"notes",route:"/notes",children:[{kind:"MdxPage",name:"GTD",route:"/notes/GTD",frontMatter:{title:"GTD",description:"글 설명",date:"2023-03-31T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"algorithm",route:"/notes/algorithm",frontMatter:{title:"알고리즘",description:null,date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"category-theory",route:"/notes/category-theory",frontMatter:{title:"카테고리 이론"}},{kind:"MdxPage",name:"composition-and-programming",route:"/notes/composition-and-programming",frontMatter:{title:"합성과 프로그래밍"}},{kind:"MdxPage",name:"concurrency",route:"/notes/concurrency",frontMatter:{title:"동시성",description:"동시성을 다루는 방법",date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"cs-terms",route:"/notes/cs-terms",frontMatter:{title:"용어 정리"}},{kind:"MdxPage",name:"data-structures",route:"/notes/data-structures",frontMatter:{title:"자료구조",description:null,date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"database",route:"/notes/database",frontMatter:{title:"데이터베이스",description:"데이터베이스",date:"2023-02-24T00:00:00.000Z",tags:[]}},{kind:"MdxPage",name:"design-pattern",route:"/notes/design-pattern",frontMatter:{title:"디자인 패턴",description:null,date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"devenv",route:"/notes/devenv",frontMatter:{title:"\uD83D\uDCBB 개발환경",description:"내 개발환경 정리"}},{kind:"MdxPage",name:"dictionary",route:"/notes/dictionary",frontMatter:{title:"딕셔너리",description:null,date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"dining-philosophers",route:"/notes/dining-philosophers",frontMatter:{title:"식사하는 철학자 문제",description:null,date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"disjoint-set",route:"/notes/disjoint-set",frontMatter:{title:"서로소 집합",description:null,date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"elixir",route:"/notes/elixir",frontMatter:{title:"엘릭서",description:"글 설명",date:"2023-03-14T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"exceptions",route:"/notes/exceptions",frontMatter:{title:"예외를 처리하는 방법",description:null,date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"hanassig",route:"/notes/hanassig",frontMatter:{title:"하나씩",description:"공부한 거 정리하기"}},{kind:"MdxPage",name:"idris",route:"/notes/idris",frontMatter:{title:"idris",description:"idris 프로그래밍 언어",date:"2023-03-15T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"korean-encoding",route:"/notes/korean-encoding",frontMatter:{title:"한글 인코딩",description:"파인더에서 괜찮던 한글이 망가지는 이유",date:"2022-02-26T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"life-optimization",route:"/notes/life-optimization",frontMatter:{title:"최적화",description:"내 삶을 최적화하기",date:"2023-03-28T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"linear-list",route:"/notes/linear-list",frontMatter:{title:"선형 리스트",description:null,date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"machine-learning",route:"/notes/machine-learning",frontMatter:{title:"\uD83E\uDD16 기계학습",description:"기계학습의 개론적인 갈래를 이해하기 위한 문서",date:"2023-02-24T00:00:00.000Z",tags:[]}},{kind:"MdxPage",name:"macos",route:"/notes/macos",frontMatter:{title:"macOS",date:"2023-02-21T00:00:00.000Z"}},{kind:"MdxPage",name:"mathematical-induction",route:"/notes/mathematical-induction",frontMatter:{title:"수학적 귀납법",description:"글 설명",date:"2023-03-30T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"minimum-spanning-tree",route:"/notes/minimum-spanning-tree",frontMatter:{title:"최소 신장 트리",description:null,date:"2022-08-19T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"miryoku",route:"/notes/miryoku",frontMatter:{title:"miryoku",description:null,date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"monad-functor-applicative",route:"/notes/monad-functor-applicative",frontMatter:{title:"모나드와 펑터와 어플리케이티브",description:"함수형 삼대장을 아는 척 해보자",date:"2023-03-08T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"music",route:"/notes/music",frontMatter:{title:"\uD83C\uDFBC 음악"}},{kind:"MdxPage",name:"my-new-gears",route:"/notes/my-new-gears",frontMatter:{title:"My New Gears",tags:"my-new-gears",date:"2023-02-21T00:00:00.000Z"}},{kind:"MdxPage",name:"network",route:"/notes/network",frontMatter:{title:"네트워크",description:"컴퓨터 네트워크",date:"2023-03-22T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"nginx-reverse-proxy",route:"/notes/nginx-reverse-proxy",frontMatter:{title:"Nginx로 리버스 프록시",description:"Proxmox VE에 리버스 프록시 서버 세팅하기",date:"2023-03-19T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"nth-week-today",route:"/notes/nth-week-today",frontMatter:{title:"오늘은 몇 주차",tags:["DIY"]}},{kind:"MdxPage",name:"openwrt",route:"/notes/openwrt",frontMatter:{title:"OpenWrt",description:"OpenWrt로 라우터 써먹기",date:"2023-03-02T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"order",route:"/notes/order",frontMatter:{title:"순서",description:"전순서와 부분순서",date:"2023-03-17T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"os",route:"/notes/os",frontMatter:{title:"운영체제",description:null,date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"phoenix",route:"/notes/phoenix",frontMatter:{title:"Phoenix",description:"phoenix 웹 프레임워크",date:"2023-02-23T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"postgresql",route:"/notes/postgresql",frontMatter:{title:"PostgreSQL",description:"PostgreSQL 기본적인 사용법 정리",date:"2023-03-04T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"programming-languages",route:"/notes/programming-languages",frontMatter:{title:"프로그래밍 언어"}},{kind:"MdxPage",name:"proxmox-setup",route:"/notes/proxmox-setup",frontMatter:{title:"Proxmox VE 기초설정",description:"Proxmox VE 설치 후 해야하는 기초 설정",date:"2023-03-18T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"proxmox-storage",route:"/notes/proxmox-storage",frontMatter:{title:"Proxmox 저장장치 설정",description:"Proxmox VE에 저장장치를 설정하기",date:"2023-03-18T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"scala",route:"/notes/scala",frontMatter:{title:"스칼라",description:"스칼라 프로그래밍 언어",date:"2023-03-10T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"sql",route:"/notes/sql",frontMatter:{title:"SQL",description:"SQL 기초 사용법",date:"2023-03-09T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"types-are-sets",route:"/notes/types-are-sets",frontMatter:{title:"타입은 집합이다"}},{kind:"MdxPage",name:"uibox",route:"/notes/uibox",frontMatter:{title:"UiBox",description:"개인용 서버",date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"unix-signal",route:"/notes/unix-signal",frontMatter:{title:"유닉스 신호",description:null,date:"2023-02-24T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"web-backend",route:"/notes/web-backend",frontMatter:{title:"\uD83C\uDF0D 웹 백엔드",description:"웹 백엔드에 대해 알아야 할 것들",date:"2023-02-23T00:00:00.000Z",tags:null}},{kind:"MdxPage",name:"zsh",route:"/notes/zsh",frontMatter:{title:"zsh"}},{kind:"Meta",data:{GTD:"GTD","mathematical-induction":"수학적 귀납법","life-optimization":"최적화",network:"네트워크","nginx-reverse-proxy":"Nginx로 리버스 프록시","proxmox-setup":"Proxmox VE 기초설정","proxmox-storage":"Proxmox 저장장치 설정",order:"순서",idris:"idris",elixir:"엘릭서",scala:"스칼라",sql:"SQL","monad-functor-applicative":"모나드와 펑터와 어플리케이티브",postgresql:"PostgreSQL",openwrt:"OpenWrt",algorithm:"알고리즘",concurrency:"동시성","data-structures":"자료구조",database:"데이터베이스","design-pattern":"디자인 패턴",dictionary:"딕셔너리","dining-philosophers":"식사하는 철학자 문제","disjoint-set":"서로소 집합",exceptions:"예외를 처리하는 방법","linear-list":"선형 리스트","machine-learning":"\uD83E\uDD16 기계학습",miryoku:"miryoku",os:"운영체제",uibox:"UiBox","unix-signal":"유닉스 신호",phoenix:"Phoenix","web-backend":"\uD83C\uDF0D 웹 백엔드",macos:"macOS","my-new-gears":"My New Gears","minimum-spanning-tree":"최소 신장 트리","korean-encoding":"한글 인코딩",music:"\uD83C\uDFBC 음악",devenv:"\uD83D\uDCBB 개발환경",zsh:"zsh","nth-week-today":"오늘은 몇 주차","cs-terms":"용어 정리","category-theory":"카테고리 이론","types-are-sets":"타입은 집합이다","programming-languages":"프로그래밍 언어",hanassig:"하나씩","composition-and-programming":"합성과 프로그래밍"}}]},{kind:"Meta",data:{index:"index"}}],flexsearch:{codeblocks:!0},title:"동시성"},pageNextRoute:"/notes/concurrency",nextraLayout:s.ZP,themeConfig:l.Z};n.default=(0,r.j)(d)}},function(e){e.O(0,[9774,2131,2888,179],function(){return e(e.s=4999)}),_N_E=e.O()}]);