{"pageProps":{"note":{"title":"모나드와 펑터와 어플리케이티브","description":"함수형 삼대장을 아는 척 해보자","date":"2023-03-08T00:00:00.000Z","tags":null,"body":{"raw":"\n요약: 셋 다 합성을 쉽게 하기 위해서이다.\n\n```haskell\nclass Monad m where\n  (>>=)  :: m a -> (a -> m b) -> m b\n  return :: a -> m a\n\nclass Functor f where\n  fmap :: (a -> b) -> f a -> f b\n  (<$) :: a -> f b -> f a\n\nclass (Functor f) => Applicative f where\n    pure  :: a -> f a\n    (<*>) :: f (a -> b) -> f a -> f b\n```\n\n![](/assets/완전이해.jpg)\n\n## 모나드\n\n이진트리 하나를 생각해보자. 어떤 노드는 그 밑에 왼쪽노드와 오른쪽노드가\n있을 수도 있고, 없을 수도 있다.\n\n```elixir\n@type Node :: %{ left: Node | nil, right: Node | nil }\n\n@spec left(Node) :: Node | nil\ndef left(node), do: node.left\n\n@spec right(Node) :: Node | nil\ndef right(node), do: node.right\n```\n\n어떤 노드 `n`의 왼쪽 자식이 노드라면 그 노드도 자식이 있을 수 있다.\n`n`의 왼쪽 자식의 오른쪽 자식을 구하려면 어떻게 해야할까?\n\n그냥 `n |> left() |> right()`하면 직관적이어서 좋겠지만, `left()`에서 `nil`이\n반환되는 경우를 생각해야 한다.\n\n```\nnode |> left() |> right()\n** (KeyError) key :left not found in: nil.\n```\n\n엘릭서스럽게 이 상황을 타파하는 간단한 방법은 저 두 함수가 `nil`을 받도록\n고치는 것이다.\n\n```elixir\n@spec left(Node) :: Node | nil\ndef left(nil), do: nil\ndef left(node), do: node.left\n\n@spec right(Node) :: Node | nil\ndef right(nil), do: nil\ndef right(node), do: node.right\n```\n\n함수를 고치지 않고 해결할 수 있을까? 패턴 매칭이나 `case`로 해결할 수 있겠지만,\n구조가 깊어질 수록 표현하기 어렵다.\n\n```elixir\n# 패턴매칭\ndef left_right_node(%{left: %{right: lrnode}}), do: lrnode\ndef left_right_node(_), do: nil\n\n# case\ndef left_right_node(node) do\n\tcase node.left do\n\t\t%{left: left} ->\n\t\t\tright(left)\n\n\t\t_ ->\n\t\t\tnil\n\tend\nend\n```\n\n`left/1`과 `right/1`을 파이핑하면 직관적으로 깊은 구조도 표현할 수 있다.\n함수를 고치지 않고 파이핑 할 수 있을까? `nil`인 경우를 처리해주는 함수를\n만들어 감싸주자.\n\n```elixir\ndef bind(nil, _), do: nil\ndef bind(val, f), do: f.(val)\n\nnode |> bind(&left/1) |> bind(&right/1) |> bind(&right/1)\n```\n\n`apply/2` 함수 덕분에 `case`를 중첩하거나 구조를 직접 나열하지 않고\n파이핑으로 직관적으로 알아볼 수 있게 되었다.\n\n### 일반화하기\n\n무엇이 문제였고, 어떻게 해결했는지 일반화해보자.\n\n`left/1`, `right/1` 함수는 `Node`를 취하고 `Node`나 `nil`을 반환하는 함수이다.\n`nil`이 반환되는 경우 때문에 다시 `left/1`, `right/1` 함수에 넣을 수 없었다.\n\n```elixir\n@spec left(Node) :: Node | nil\n@spec right(Node) :: Node | nil\n```\n\n\"`Node | nil`\"은 유무를 나타내기 위해 `Node`를 확장한 타입이다.\n이외에도 다양한 맥락에 의해 `Node`를 확장할 수 있다.\n\n```elixir\n# 유무를 나타내기 위해: Maybe monad, Option monad\n@spec left(Node) :: Node | nil\n\n# 실패까지 나타내기 위해: Result monad\n@spec get_left_from_network(Node) :: {:ok, Node} | {:error, reason}\n\n# 여러개가 있음을 나타내기 위해: List Monad\n@spec children(Node) :: [Node]\n```\n\n이런 함수로 얻은 값을 `Node`에 취하려면 특수한 경우를 처리하고 순수한 `Node`를\n얻어야 한다. 크게 네 가지 경우를 생각할 수 있다:\n\n1. 함수가 직접 특수한 경우도 받도록 한다.\n2. 내가 직접 처리해서 함수에 던져준다.\n3. 처리해주는 함수를 쓴 후 그 결과를 함수에 던져준다.\n4. `with`을 쓴다.\n\n어떤 타입을 확장한 타입은 그 가짓수가 많다. 특별히 유용한 경우가 아니라면\n매번 함수를 만들 때 이런 경우도 모두 처리하는 것은 어려울 것이다.\n\n따라서 보통은 내가 직접 처리해서 함수에 던져주는 것이 나을 것이다.\n엘릭서의 경우 함수 인자나 case를 통한 패턴매칭으로 손쉽게 처리할 수 있다.\n\n```elixir\n{:ok, content} = File.read(filename)\ndo_something(content)\n\n# 에러도 처리하기\ncase File.read(filename) do\n\t{:ok, content} ->\n\t\tdo_something(content)\n\n\t{:error, reason} ->\n\t\thandle_error(reason)\nend\n```\n\n그러나 이런 제어구조를 빈번히 사용하면 가독성이 떨어진다. `Node`의 자식의\n자식을 찾는 예시에서 처럼 제어구조가 중첩되면 읽기 어렵고 고치기 어렵다.\n\n```elixir\ncase Accounts.get_user(id) do\n\t{:ok, user} ->\n\t\tcase Accounts.update_user(user, name: \"fantastic\") do\n\t\t\t{:ok, updated_user} ->\n\t\t\t\tIO.puts(\"User updated!\")\n\t\t\t{:error, reason} ->\n\t\t\t\tIO.puts(\"User can not be updated with #{reason}\")\n\t\tend\n\t{:error, _} ->\n\t\thandle_not_found()\nend\n```\n\n```elixir\ndef nil ~>> _, do: nil\ndef val ~>> f, do: f.(val)\n\nnode ~>> left() ~>> right() ~>> right()\n```\n","code":"var Component=(()=>{var s=Object.create;var r=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var u=(d,e)=>()=>(e||d((e={exports:{}}).exports,e),e.exports),m=(d,e)=>{for(var l in e)r(d,l,{get:e[l],enumerable:!0})},o=(d,e,l,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!N.call(d,i)&&i!==l&&r(d,i,{get:()=>e[i],enumerable:!(c=f(e,i))||c.enumerable});return d};var _=(d,e,l)=>(l=d!=null?s(g(d)):{},o(e||!d||!d.__esModule?r(l,\"default\",{value:d,enumerable:!0}):l,d)),x=d=>o(r({},\"__esModule\",{value:!0}),d);var h=u((F,t)=>{t.exports=_jsx_runtime});var w={};m(w,{default:()=>k,frontmatter:()=>b});var n=_(h()),b={title:\"\\uBAA8\\uB098\\uB4DC\\uC640 \\uD391\\uD130\\uC640 \\uC5B4\\uD50C\\uB9AC\\uCF00\\uC774\\uD2F0\\uBE0C\",description:\"\\uD568\\uC218\\uD615 \\uC0BC\\uB300\\uC7A5\\uC744 \\uC544\\uB294 \\uCC99 \\uD574\\uBCF4\\uC790\",date:new Date(16782336e5),tags:null};function a(d){let e=Object.assign({p:\"p\",pre:\"pre\",code:\"code\",img:\"img\",h2:\"h2\",h3:\"h3\",ol:\"ol\",li:\"li\"},d.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"\\uC694\\uC57D: \\uC14B \\uB2E4 \\uD569\\uC131\\uC744 \\uC27D\\uAC8C \\uD558\\uAE30 \\uC704\\uD574\\uC11C\\uC774\\uB2E4.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-haskell\",children:`class Monad m where\n  (>>=)  :: m a -> (a -> m b) -> m b\n  return :: a -> m a\n\nclass Functor f where\n  fmap :: (a -> b) -> f a -> f b\n  (<$) :: a -> f b -> f a\n\nclass (Functor f) => Applicative f where\n    pure  :: a -> f a\n    (<*>) :: f (a -> b) -> f a -> f b\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/%EC%99%84%EC%A0%84%EC%9D%B4%ED%95%B4.jpg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.h2,{children:\"\\uBAA8\\uB098\\uB4DC\"}),`\n`,(0,n.jsx)(e.p,{children:`\\uC774\\uC9C4\\uD2B8\\uB9AC \\uD558\\uB098\\uB97C \\uC0DD\\uAC01\\uD574\\uBCF4\\uC790. \\uC5B4\\uB5A4 \\uB178\\uB4DC\\uB294 \\uADF8 \\uBC11\\uC5D0 \\uC67C\\uCABD\\uB178\\uB4DC\\uC640 \\uC624\\uB978\\uCABD\\uB178\\uB4DC\\uAC00\n\\uC788\\uC744 \\uC218\\uB3C4 \\uC788\\uACE0, \\uC5C6\\uC744 \\uC218\\uB3C4 \\uC788\\uB2E4.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-elixir\",children:`@type Node :: %{ left: Node | nil, right: Node | nil }\n\n@spec left(Node) :: Node | nil\ndef left(node), do: node.left\n\n@spec right(Node) :: Node | nil\ndef right(node), do: node.right\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\uC5B4\\uB5A4 \\uB178\\uB4DC \",(0,n.jsx)(e.code,{children:\"n\"}),`\\uC758 \\uC67C\\uCABD \\uC790\\uC2DD\\uC774 \\uB178\\uB4DC\\uB77C\\uBA74 \\uADF8 \\uB178\\uB4DC\\uB3C4 \\uC790\\uC2DD\\uC774 \\uC788\\uC744 \\uC218 \\uC788\\uB2E4.\n`,(0,n.jsx)(e.code,{children:\"n\"}),\"\\uC758 \\uC67C\\uCABD \\uC790\\uC2DD\\uC758 \\uC624\\uB978\\uCABD \\uC790\\uC2DD\\uC744 \\uAD6C\\uD558\\uB824\\uBA74 \\uC5B4\\uB5BB\\uAC8C \\uD574\\uC57C\\uD560\\uAE4C?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\uADF8\\uB0E5 \",(0,n.jsx)(e.code,{children:\"n |> left() |> right()\"}),\"\\uD558\\uBA74 \\uC9C1\\uAD00\\uC801\\uC774\\uC5B4\\uC11C \\uC88B\\uACA0\\uC9C0\\uB9CC, \",(0,n.jsx)(e.code,{children:\"left()\"}),\"\\uC5D0\\uC11C \",(0,n.jsx)(e.code,{children:\"nil\"}),`\\uC774\n\\uBC18\\uD658\\uB418\\uB294 \\uACBD\\uC6B0\\uB97C \\uC0DD\\uAC01\\uD574\\uC57C \\uD55C\\uB2E4.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`node |> left() |> right()\n** (KeyError) key :left not found in: nil.\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\uC5D8\\uB9AD\\uC11C\\uC2A4\\uB7FD\\uAC8C \\uC774 \\uC0C1\\uD669\\uC744 \\uD0C0\\uD30C\\uD558\\uB294 \\uAC04\\uB2E8\\uD55C \\uBC29\\uBC95\\uC740 \\uC800 \\uB450 \\uD568\\uC218\\uAC00 \",(0,n.jsx)(e.code,{children:\"nil\"}),`\\uC744 \\uBC1B\\uB3C4\\uB85D\n\\uACE0\\uCE58\\uB294 \\uAC83\\uC774\\uB2E4.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-elixir\",children:`@spec left(Node) :: Node | nil\ndef left(nil), do: nil\ndef left(node), do: node.left\n\n@spec right(Node) :: Node | nil\ndef right(nil), do: nil\ndef right(node), do: node.right\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\uD568\\uC218\\uB97C \\uACE0\\uCE58\\uC9C0 \\uC54A\\uACE0 \\uD574\\uACB0\\uD560 \\uC218 \\uC788\\uC744\\uAE4C? \\uD328\\uD134 \\uB9E4\\uCE6D\\uC774\\uB098 \",(0,n.jsx)(e.code,{children:\"case\"}),`\\uB85C \\uD574\\uACB0\\uD560 \\uC218 \\uC788\\uACA0\\uC9C0\\uB9CC,\n\\uAD6C\\uC870\\uAC00 \\uAE4A\\uC5B4\\uC9C8 \\uC218\\uB85D \\uD45C\\uD604\\uD558\\uAE30 \\uC5B4\\uB835\\uB2E4.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-elixir\",children:`# \\uD328\\uD134\\uB9E4\\uCE6D\ndef left_right_node(%{left: %{right: lrnode}}), do: lrnode\ndef left_right_node(_), do: nil\n\n# case\ndef left_right_node(node) do\n\tcase node.left do\n\t\t%{left: left} ->\n\t\t\tright(left)\n\n\t\t_ ->\n\t\t\tnil\n\tend\nend\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"left/1\"}),\"\\uACFC \",(0,n.jsx)(e.code,{children:\"right/1\"}),`\\uC744 \\uD30C\\uC774\\uD551\\uD558\\uBA74 \\uC9C1\\uAD00\\uC801\\uC73C\\uB85C \\uAE4A\\uC740 \\uAD6C\\uC870\\uB3C4 \\uD45C\\uD604\\uD560 \\uC218 \\uC788\\uB2E4.\n\\uD568\\uC218\\uB97C \\uACE0\\uCE58\\uC9C0 \\uC54A\\uACE0 \\uD30C\\uC774\\uD551 \\uD560 \\uC218 \\uC788\\uC744\\uAE4C? `,(0,n.jsx)(e.code,{children:\"nil\"}),`\\uC778 \\uACBD\\uC6B0\\uB97C \\uCC98\\uB9AC\\uD574\\uC8FC\\uB294 \\uD568\\uC218\\uB97C\n\\uB9CC\\uB4E4\\uC5B4 \\uAC10\\uC2F8\\uC8FC\\uC790.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-elixir\",children:`def bind(nil, _), do: nil\ndef bind(val, f), do: f.(val)\n\nnode |> bind(&left/1) |> bind(&right/1) |> bind(&right/1)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"apply/2\"}),\" \\uD568\\uC218 \\uB355\\uBD84\\uC5D0 \",(0,n.jsx)(e.code,{children:\"case\"}),`\\uB97C \\uC911\\uCCA9\\uD558\\uAC70\\uB098 \\uAD6C\\uC870\\uB97C \\uC9C1\\uC811 \\uB098\\uC5F4\\uD558\\uC9C0 \\uC54A\\uACE0\n\\uD30C\\uC774\\uD551\\uC73C\\uB85C \\uC9C1\\uAD00\\uC801\\uC73C\\uB85C \\uC54C\\uC544\\uBCFC \\uC218 \\uC788\\uAC8C \\uB418\\uC5C8\\uB2E4.`]}),`\n`,(0,n.jsx)(e.h3,{children:\"\\uC77C\\uBC18\\uD654\\uD558\\uAE30\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\uBB34\\uC5C7\\uC774 \\uBB38\\uC81C\\uC600\\uACE0, \\uC5B4\\uB5BB\\uAC8C \\uD574\\uACB0\\uD588\\uB294\\uC9C0 \\uC77C\\uBC18\\uD654\\uD574\\uBCF4\\uC790.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"left/1\"}),\", \",(0,n.jsx)(e.code,{children:\"right/1\"}),\" \\uD568\\uC218\\uB294 \",(0,n.jsx)(e.code,{children:\"Node\"}),\"\\uB97C \\uCDE8\\uD558\\uACE0 \",(0,n.jsx)(e.code,{children:\"Node\"}),\"\\uB098 \",(0,n.jsx)(e.code,{children:\"nil\"}),`\\uC744 \\uBC18\\uD658\\uD558\\uB294 \\uD568\\uC218\\uC774\\uB2E4.\n`,(0,n.jsx)(e.code,{children:\"nil\"}),\"\\uC774 \\uBC18\\uD658\\uB418\\uB294 \\uACBD\\uC6B0 \\uB54C\\uBB38\\uC5D0 \\uB2E4\\uC2DC \",(0,n.jsx)(e.code,{children:\"left/1\"}),\", \",(0,n.jsx)(e.code,{children:\"right/1\"}),\" \\uD568\\uC218\\uC5D0 \\uB123\\uC744 \\uC218 \\uC5C6\\uC5C8\\uB2E4.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-elixir\",children:`@spec left(Node) :: Node | nil\n@spec right(Node) :: Node | nil\n`})}),`\n`,(0,n.jsxs)(e.p,{children:['\"',(0,n.jsx)(e.code,{children:\"Node | nil\"}),'\"\\uC740 \\uC720\\uBB34\\uB97C \\uB098\\uD0C0\\uB0B4\\uAE30 \\uC704\\uD574 ',(0,n.jsx)(e.code,{children:\"Node\"}),`\\uB97C \\uD655\\uC7A5\\uD55C \\uD0C0\\uC785\\uC774\\uB2E4.\n\\uC774\\uC678\\uC5D0\\uB3C4 \\uB2E4\\uC591\\uD55C \\uB9E5\\uB77D\\uC5D0 \\uC758\\uD574 `,(0,n.jsx)(e.code,{children:\"Node\"}),\"\\uB97C \\uD655\\uC7A5\\uD560 \\uC218 \\uC788\\uB2E4.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-elixir\",children:`# \\uC720\\uBB34\\uB97C \\uB098\\uD0C0\\uB0B4\\uAE30 \\uC704\\uD574: Maybe monad, Option monad\n@spec left(Node) :: Node | nil\n\n# \\uC2E4\\uD328\\uAE4C\\uC9C0 \\uB098\\uD0C0\\uB0B4\\uAE30 \\uC704\\uD574: Result monad\n@spec get_left_from_network(Node) :: {:ok, Node} | {:error, reason}\n\n# \\uC5EC\\uB7EC\\uAC1C\\uAC00 \\uC788\\uC74C\\uC744 \\uB098\\uD0C0\\uB0B4\\uAE30 \\uC704\\uD574: List Monad\n@spec children(Node) :: [Node]\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\uC774\\uB7F0 \\uD568\\uC218\\uB85C \\uC5BB\\uC740 \\uAC12\\uC744 \",(0,n.jsx)(e.code,{children:\"Node\"}),\"\\uC5D0 \\uCDE8\\uD558\\uB824\\uBA74 \\uD2B9\\uC218\\uD55C \\uACBD\\uC6B0\\uB97C \\uCC98\\uB9AC\\uD558\\uACE0 \\uC21C\\uC218\\uD55C \",(0,n.jsx)(e.code,{children:\"Node\"}),`\\uB97C\n\\uC5BB\\uC5B4\\uC57C \\uD55C\\uB2E4. \\uD06C\\uAC8C \\uB124 \\uAC00\\uC9C0 \\uACBD\\uC6B0\\uB97C \\uC0DD\\uAC01\\uD560 \\uC218 \\uC788\\uB2E4:`]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"\\uD568\\uC218\\uAC00 \\uC9C1\\uC811 \\uD2B9\\uC218\\uD55C \\uACBD\\uC6B0\\uB3C4 \\uBC1B\\uB3C4\\uB85D \\uD55C\\uB2E4.\"}),`\n`,(0,n.jsx)(e.li,{children:\"\\uB0B4\\uAC00 \\uC9C1\\uC811 \\uCC98\\uB9AC\\uD574\\uC11C \\uD568\\uC218\\uC5D0 \\uB358\\uC838\\uC900\\uB2E4.\"}),`\n`,(0,n.jsx)(e.li,{children:\"\\uCC98\\uB9AC\\uD574\\uC8FC\\uB294 \\uD568\\uC218\\uB97C \\uC4F4 \\uD6C4 \\uADF8 \\uACB0\\uACFC\\uB97C \\uD568\\uC218\\uC5D0 \\uB358\\uC838\\uC900\\uB2E4.\"}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"with\"}),\"\\uC744 \\uC4F4\\uB2E4.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`\\uC5B4\\uB5A4 \\uD0C0\\uC785\\uC744 \\uD655\\uC7A5\\uD55C \\uD0C0\\uC785\\uC740 \\uADF8 \\uAC00\\uC9D3\\uC218\\uAC00 \\uB9CE\\uB2E4. \\uD2B9\\uBCC4\\uD788 \\uC720\\uC6A9\\uD55C \\uACBD\\uC6B0\\uAC00 \\uC544\\uB2C8\\uB77C\\uBA74\n\\uB9E4\\uBC88 \\uD568\\uC218\\uB97C \\uB9CC\\uB4E4 \\uB54C \\uC774\\uB7F0 \\uACBD\\uC6B0\\uB3C4 \\uBAA8\\uB450 \\uCC98\\uB9AC\\uD558\\uB294 \\uAC83\\uC740 \\uC5B4\\uB824\\uC6B8 \\uAC83\\uC774\\uB2E4.`}),`\n`,(0,n.jsx)(e.p,{children:`\\uB530\\uB77C\\uC11C \\uBCF4\\uD1B5\\uC740 \\uB0B4\\uAC00 \\uC9C1\\uC811 \\uCC98\\uB9AC\\uD574\\uC11C \\uD568\\uC218\\uC5D0 \\uB358\\uC838\\uC8FC\\uB294 \\uAC83\\uC774 \\uB098\\uC744 \\uAC83\\uC774\\uB2E4.\n\\uC5D8\\uB9AD\\uC11C\\uC758 \\uACBD\\uC6B0 \\uD568\\uC218 \\uC778\\uC790\\uB098 case\\uB97C \\uD1B5\\uD55C \\uD328\\uD134\\uB9E4\\uCE6D\\uC73C\\uB85C \\uC190\\uC27D\\uAC8C \\uCC98\\uB9AC\\uD560 \\uC218 \\uC788\\uB2E4.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-elixir\",children:`{:ok, content} = File.read(filename)\ndo_something(content)\n\n# \\uC5D0\\uB7EC\\uB3C4 \\uCC98\\uB9AC\\uD558\\uAE30\ncase File.read(filename) do\n\t{:ok, content} ->\n\t\tdo_something(content)\n\n\t{:error, reason} ->\n\t\thandle_error(reason)\nend\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\uADF8\\uB7EC\\uB098 \\uC774\\uB7F0 \\uC81C\\uC5B4\\uAD6C\\uC870\\uB97C \\uBE48\\uBC88\\uD788 \\uC0AC\\uC6A9\\uD558\\uBA74 \\uAC00\\uB3C5\\uC131\\uC774 \\uB5A8\\uC5B4\\uC9C4\\uB2E4. \",(0,n.jsx)(e.code,{children:\"Node\"}),`\\uC758 \\uC790\\uC2DD\\uC758\n\\uC790\\uC2DD\\uC744 \\uCC3E\\uB294 \\uC608\\uC2DC\\uC5D0\\uC11C \\uCC98\\uB7FC \\uC81C\\uC5B4\\uAD6C\\uC870\\uAC00 \\uC911\\uCCA9\\uB418\\uBA74 \\uC77D\\uAE30 \\uC5B4\\uB835\\uACE0 \\uACE0\\uCE58\\uAE30 \\uC5B4\\uB835\\uB2E4.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-elixir\",children:`case Accounts.get_user(id) do\n\t{:ok, user} ->\n\t\tcase Accounts.update_user(user, name: \"fantastic\") do\n\t\t\t{:ok, updated_user} ->\n\t\t\t\tIO.puts(\"User updated!\")\n\t\t\t{:error, reason} ->\n\t\t\t\tIO.puts(\"User can not be updated with #{reason}\")\n\t\tend\n\t{:error, _} ->\n\t\thandle_not_found()\nend\n`})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-elixir\",children:`def nil ~>> _, do: nil\ndef val ~>> f, do: f.(val)\n\nnode ~>> left() ~>> right() ~>> right()\n`})})]})}function j(d={}){let{wrapper:e}=d.components||{};return e?(0,n.jsx)(e,Object.assign({},d,{children:(0,n.jsx)(a,d)})):a(d)}var k=j;return x(w);})();\n;return Component;"},"_id":"monad-functor-applicative.md","_raw":{"sourceFilePath":"monad-functor-applicative.md","sourceFileName":"monad-functor-applicative.md","sourceFileDir":".","contentType":"markdown","flattenedPath":"monad-functor-applicative"},"type":"Note","slug":"monad-functor-applicative"}},"__N_SSG":true}